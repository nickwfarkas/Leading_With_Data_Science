table(Model.Pred$class)[,1]
table(Model.Pred$class)[1]
table(Model.Pred$class)[1:2]
table(Model.Pred$class)[1,2]
table(Model.Pred$class)[1,] + table(Model$counts)[1,]
Model.Pred[1,]
install.packages("neuralnet")
install.packages("caret")
library(neuralnet)
library(caret)
library(neuralnet)
library(caret)
NN <- neuralnet(Species~., data=iris, hidden = c(5,3))
pred <- compute(NN, iris[,c(1,2,3,4)])
for(i in 1:150)
{
pred.max <- rbind(pred.2, which.max(pred$net.result[i,]))
}
pred.max <- data.frame()
for(i in 1:150)
{
pred.max <- rbind(pred.max, which.max(pred$net.result[i,]))
}
# Changing numeric IDs to actual species name
pred.max$X1L <- gsub(1,"setosa",pred.max$X1L)
pred.max$X1L <- gsub(2,"versicolor",pred.max$X1L)
pred.max$X1L <- gsub(3,"virginica",pred.max$X1L)
pred.max
# Changes from character to factor
pred.final <- as.factor(pred.max$X1L)
actual <- iris[,5]
confusionMatrix(pred.final,actual)
help(cut)
healp(smooth.spline)
help(smooth.spline)
help(ns)
Nile
n <- Nile
n$Frequency
smooth.spline(Nile)
help(cut)
lm(beaver1$temp~cut(c(1:114)))
lm(beaver1$temp~cut(c(1:114),1))
lm(beaver1$temp~cut(c(1:114),2))
AIC(lm(beaver1$temp~cut(c(1:114),2)))
AIC(lm(beaver1$temp~cut(c(1:114),3)))
AIC(lm(beaver1$temp~cut(c(1:114),4)))
AIC(lm(beaver1$temp~cut(c(1:114),5)))
AIC(lm(beaver1$temp~cut(c(1:114),6)))
mean(lm(beaver1$temp~cut(c(1:114),6)))
plot(lm(beaver1$temp~cut(c(1:114),6)))
plot(lm(beaver1$temp~cut(c(1:114),6)))
plot(beaver1$temp~cut(c(1:114),2))
plot(beaver1$temp~c(1:114))
mean(beaver1$temp[1:90])
mean(beaver1$temp[1:(114-22)])
mean(beaver1$temp[1:(114-21)])
mean(beaver1$temp[1:(114-23)])
?gbm
??gbm
?randomForest
install.packages("library(randomForest)")
install.packages("randomForest")
library(randomForest)
?randomForest
Lmod <- lm(iris$Sepal.Length~iris$Sepal.Width+iris$Petal.Length)
DF <- Lmod$df
RSS <- sum(resid(Lmod)^2)
sqrt(RSS/DF) # estimated sigma
data <- mtcars
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+am, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+am, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+qsec+am, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+hp+wt+qsec+am, data=data)
AIC(model)
model <- lm(mpg~cyl+disp+wt+qsec+am, data=data)
AIC(model)
model <- lm(mpg~cyl+hp+wt+qsec+am, data=data)
AIC(model)
model <- lm(mpg~hp+wt+qsec+am, data=data)
AIC(model)
AIC(model)
model <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
disp+
disp+
model <- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear, data=data)
model <- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
+hp
model <- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+qsec+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+vs+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+qsec+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+am+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+qsec+gear, data=data)
AIC(model)
model <- lm(mpg~disp+hp+wt+qsec, data=data)
AIC(model)
Y <- ifelse(iris$Species=="virginica",1,0)
M <- glm(Y[50:150]~iris$Sepal.Length[50:150]+iris$Sepal.Width[50:150],family = "binomial")
M
summary(M)
summary(M)
M$coefficients
1-pchisq(112.2-105,3)
Y
library("faraway")
library(faraway)
install.packages('faraway')
library(faraway)
pairs(faraway)
P <- prostate
pairs(P)
pairs(P)
pairs(P)
library(corrplot)
corrplot(P)
corrplot(P, is.corr = FALSE)
corrplot(cor(P), is.corr = TRUE)
P.Linear.Model <- lm(P$lpsa~P$lcavol)
summary(P.Linear.Model)
#d
text(lpsa ~lcavol, labels=rownames(prostate))
#d
text(lpsa ~lcavol, labels=rownames(prostate), data =
P)
#d
plot(lcavol,lpsa,data=P)
#d
plot(lcavol,lpsa,data=P)
#d
plot(P$lcavol,P$lpsa)
abline(P.Linear.Model)
text(lpsa ~lcavol, labels=rownames(prostate), data =
P)
abline(P.Linear.Model,col(2))
abline(P.Linear.Model,col="red")
#e
plot(P.Linear.Model, which = 1)
cooks.distance(P.Linear.Model)
plot(cooks.distance(P.Linear.Model))
#f
max(cooks.distance(P.Linear.Model))
#f
mx <- max(cooks.distance(P.Linear.Model))
cd.p <- cooks.distance(P.Linear.Model)
which.max(cd.p)
which.max(cd.p)
P.Multi.Linear.Model <- lm(lpsa~lcavol+svi+gleason, data = P)
summary(P.Multi.Linear.Model)
P.Linear.Model <- lm(P$lpsa~P$lcavol)
summary(P.Linear.Model)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol^2)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~log(P$lcavol))
P.Linear.Model <- lm(P$lpsa~P$lcavol*2)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol^2)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol^3)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~sqrt(P$lcavol))
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$lweight)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$age)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$lbph)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$svi)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$svi+P$lcp)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$svi+P$gleason)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$svi+P$pgg45)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$lcavol^2)
plot(P.Linear.Model, which = 1)
P.Linear.Model <- lm(P$lpsa~P$lcavol+P$svi)
plot(P.Linear.Model, which = 1)
#f
mx <- max(cooks.distance(P.Linear.Model))
cd.p <- cooks.distance(P.Linear.Model)
which.max(cd.p)
cd.p
P
P[96,]
which.max(cd.p[0,])
which.max(cd.p[1,])
which.max(cd.p[1,1])
which.max(cd.p[,1])
which.max(cd.p[,])
which.max(cd.p)
P[96,]
P[96,]$lcavol
plot(P$lcavol,P$lpsa)
abline(P.Linear.Model,col="red")
P[96,]
P.Multi.Linear.Model <- lm(lpsa~lcavol+svi+gleason, data = P)
summary(P.Multi.Linear.Model)
t.test(P$lpsa, P$gleason, paired=TRUE)
Chess <- read.csv("Chess-1.csv")
setwd("~/Downloads/Regression_Analysis")
Chess <- read.csv("Chess-1.csv")
Chess$WinProp <- with(Chess, Win/Games)
require(gam)
library(gam)
install.packages("gam")
library(gam)
m1 <- gam(WinProp~Sleep+BP,family = betar(), data=Chess)
library(mgcv)
m1 <- gam(WinProp~Sleep+BP,family = betar(), data=Chess)
summary(m1)
Mu <- fitted(m1)[1]
Phi <- 3.528
VarY <- (Mu*(1-Mu))/(1+Phi)
VarY
Model <- glm(Chess$WinProp~Chess$Sleep+Chess$BP,family = "binomial")
Summary(Model)
summary(Model)
deviance(Model)
pchisq(deviance(Model),df=15,lower=F)
problem3a(iris)
problem3a <- function(data){
print("Basic Description:")
cat(paste("No of Data Points: ",nrow(data),"\n"))
cat(paste("No of Data Features: ",ncol(data),"\n"))
cat(paste("No of Response Classes: ",length(levels(data$Species))))
}
problem3b <- function(data){
limit <- ncol(data)-1
print("Mean:")
print(sapply(data[,1:limit],mean))
print("Median:")
print(sapply(data[,1:limit],median))
print("Mode:")
print(sapply(data[,1:limit],sd))
print("Minimum:")
print(sapply(data[,1:limit],min))
print("Maximum:")
print(sapply(data[,1:limit],max))
}
problem3c <- function(data){
plot(data[,1:2],
pch=c("W","L"),
col=c("red","blue"),
main="Sepal Petal Width vs Sepal Petal Length",
ylab="Width (cm)",
xlab="Length (cm)",
)
legend("topright",
c("Length","Width"),
fill=c("blue","red")
)
}
problem3a(iris)
problem3b(iris)
problem3c(iris)
square <- function(x){
x^2
}
plot(square)
plot(d1)
d1 <- function(s){
(1-s)/s
}
d2 <- function(s){
-log(s)
}
plot(d1)
line(d2)
plot(d2)
curve(d1, col = 1)
curve(d2, col = 2, add = TRUE)
curve(d1, col = 1)
curve(d2, col = 2, add = TRUE)
plot(d2)
curve(d1, col = 1)
problem4()
problem4 <- function(){
plot(d1)
plot(d2)
}
problem4()
problem4 <- function(){
curve(d1, col = 1)
curve(d2, col = 2, add = TRUE)
}
problem4()
#Problem 6
xor(c(1,0,1),c(0,1,1))
#Problem 6
sum(xor(c(1,0,1),c(0,1,1)))
#Problem 6
sum(xor(11011001, 10011101))
#Problem 6
sum(xor(c(1,1,0,1,1,0,0,1), c(1,0,0,1,1,1,0,1)))
x <- c(0,1,0,1,0,1,0,1,0,1)
y <- c(0,1,0,0,0,1,1,0,0,0)
hamming.distance <- sum(xor(x, y))
jaccard.distance <- sum(!xor(x, y))
hamming.distance
jaccard.distance
SMC <- function(x,y){
hamming.distance <- sum(xor(x, y))
print(-1*(hamming.distance/length(x))-1)
}
SMC(x,y)
SMC <- function(x,y){
hamming.distance <- sum(xor(x, y))
length(x) - hamming.distance
}
SMC(x,y)
cor(x,y)
claer
clear
clear()
problem3a(iris)
problem3b <- function(data){
limit <- ncol(data)-1
print("Mean:")
print(sapply(data[,1:limit],mean))
print("Median:")
print(sapply(data[,1:limit],median))
print("Mode:")
print(sapply(data[,1:limit],sd))
print("Minimum:")
print(sapply(data[,1:limit],min))
print("Maximum:")
print(sapply(data[,1:limit],max))
}
problem3b(iris)
problem3a <- function(data){
print("Basic Description:")
cat(paste("No of Data Points: ",nrow(data),"\n"))
cat(paste("No of Data Features: ",ncol(data),"\n"))
cat(paste("No of Response Classes: ",length(levels(data$Species))))
}
problem3b <- function(data){
limit <- ncol(data)-1
print("Mean:")
print(sapply(data[,1:limit],mean))
print("Median:")
print(sapply(data[,1:limit],median))
print("Mode:")
print(sapply(data[,1:limit],sd))
print("Minimum:")
print(sapply(data[,1:limit],min))
print("Maximum:")
print(sapply(data[,1:limit],max))
}
problem3c <- function(data){
plot(data[,1:2],
pch=c("W","L"),
col=c("red","blue"),
main="Sepal Petal Width vs Sepal Petal Length",
ylab="Width (cm)",
xlab="Length (cm)",
)
legend("topright",
c("Length","Width"),
fill=c("blue","red")
)
}
problem3a(iris)
problem3b(iris)
problem3c(iris)
d1 <- function(s){
(1-s)/s
}
d2 <- function(s){
-log(s)
}
problem4 <- function(){
curve(d1, col = 1)
curve(d2, col = 2, add = TRUE)
}
problem4()
x <- c(0,1,0,1,0,1,0,1,0,1)
y <- c(0,1,0,0,0,1,1,0,0,0)
hamming.distance <- sum(xor(x, y))
jaccard.distance <- sum(!xor(x, y))
cat(paste("Hamming Distance: ",hamming.distance,"\n"))
cat(paste("Jaccard Distance: ",jaccard.distance,"\n"))
SMC <- function(x,y){
hamming.distance <- sum(xor(x, y))
length(x) - hamming.distance
}
SMC(x,y)
x <- c(0,-1,0,1)
y <- (1,0,-1,0)
x <- c(0,-1,0,1)
y <- c(1,0,-1,0)
cosine <- function(x,y){
sum(x*y)/length(x)
}
euclidean.distance <- function(x, y){
sqrt(sum((x - y)^2))
}
cat(paste("Cosine: ",cosine(x,y),"\n"))
cat(paste("Correlation: ",cor(x,y),"\n"))
cat(paste("Euclidean: ",euclidean.distance(x,y),"\n"))
x <- c(0,1,0,1)
y <- (1,0,1,0)
x <- c(0,1,0,1)
y <- c(1,0,1,0)
cat(paste("Cosine: ",cosine(x,y),"\n"))
cat(paste("Correlation: ",cor(x,y),"\n"))
cat(paste("Euclidean: ",euclidean.distance(x,y),"\n"))
cat(paste("Jaccard: ",sum(!xor(x, y)),"\n"))
problem3a <- function(data){
print("Basic Description:")
cat(paste("No of Data Points: ",nrow(data),"\n"))
cat(paste("No of Data Features: ",ncol(data),"\n"))
cat(paste("No of Response Classes: ",length(levels(data$Species))))
}
problem3b <- function(data){
limit <- ncol(data)-1
print("Mean:")
print(sapply(data[,1:limit],mean))
print("Median:")
print(sapply(data[,1:limit],median))
print("Mode:")
print(sapply(data[,1:limit],sd))
print("Minimum:")
print(sapply(data[,1:limit],min))
print("Maximum:")
print(sapply(data[,1:limit],max))
}
problem3c <- function(data){
plot(data[,1:2],
pch=c("W","L"),
col=c("red","blue"),
main="Sepal Petal Width vs Sepal Petal Length",
ylab="Width (cm)",
xlab="Length (cm)",
)
legend("topright",
c("Length","Width"),
fill=c("blue","red")
)
}
problem3a(iris)
problem3b(iris)
problem3c(iris)
d1 <- function(s){
(1-s)/s
}
d2 <- function(s){
-log(s)
}
problem4 <- function(){
curve(d1, col = 1)
curve(d2, col = 2, add = TRUE)
}
problem4()
x <- c(0,1,0,1,0,1,0,1,0,1)
y <- c(0,1,0,0,0,1,1,0,0,0)
hamming.distance <- sum(xor(x, y))
jaccard.distance <- sum(!xor(x, y))
cat(paste("Hamming Distance: ",hamming.distance,"\n"))
cat(paste("Jaccard Distance: ",jaccard.distance,"\n"))
SMC <- function(x,y){
hamming.distance <- sum(xor(x, y))
length(x) - hamming.distance
}
cat(paste("Simple Matching Coefficient: ",SMC(x,y),"\n"))
x <- c(0,-1,0,1)
y <- c(1,0,-1,0)
cosine <- function(x,y){
sum(x*y)/length(x)
}
euclidean.distance <- function(x, y){
sqrt(sum((x - y)^2))
}
cat(paste("Cosine: ",cosine(x,y),"\n"))
cat(paste("Correlation: ",cor(x,y),"\n"))
cat(paste("Euclidean: ",euclidean.distance(x,y),"\n"))
x <- c(0,1,0,1)
y <- c(1,0,1,0)
cat(paste("Cosine: ",cosine(x,y),"\n"))
cat(paste("Correlation: ",cor(x,y),"\n"))
cat(paste("Euclidean: ",euclidean.distance(x,y),"\n"))
cat(paste("Jaccard: ",sum(!xor(x, y)),"\n"))
